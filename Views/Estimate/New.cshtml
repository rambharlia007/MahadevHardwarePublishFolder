@model MahadevHWBillingApp.Models.Profile

<style>
    .table-sm td, .table-sm th {
        padding: 0.15rem !important;
    }

    .pointer {
        cursor: pointer;
    }

    .border-right {
        border-right: 1px solid #eee !important;
    }

    .border-top {
        border-top: 1px solid #eee !important;
    }

    .border-bottom {
        border-bottom: 1px solid #eee !important;
    }

    .border-left {
        border-left: 1px solid #eee !important;
    }

    .hide {
        display: none;
    }

    [v-cloak] {
        display: none;
    }

    .bg-grey {
        background-color: #eee;
    }

    .table-head, .table-body .table-row {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    @@media only screen and (min-width: 768px) {
        .table-body {
            display: block;
            height: 250PX;
            overflow-y: scroll;
        }
    }

    @@media only screen and (min-width: 992px) {
        .table-body {
            display: block;
            height: 200px;
            overflow-y: scroll;
        }
    }

    @@media only screen and (min-width: 1500px) {
        .table-body {
            display: block;
            max-height: 500px;
            overflow-y: scroll;
        }
    }
</style>

<div id="app" v-cloak>
    <div class="row d-print-none" style="background-color: #f6f7f8 !important;">
        <div class="col-md-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb" style="padding-bottom: 0px; margin-bottom: 0px; background-color: #f6f7f8 !important;">
                    <li class="breadcrumb-item"><i class="fa fa-home">&nbsp;</i><a href="#">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Estimate</li>
                </ol>
            </nav>
            <h4 style="padding-left: 15px;">Estimate</h4>
        </div>
        <div class="col-md-4">
            <button style="margin-top:25px; float:right;" type="button" class="btn btn-success btn-sm" v-if="!isPreview" v-on:click="showOrHidePreview(true)">Print Preview</button>
            <button style="margin-top:25px; margin-right:10px; float:right;" type="button" class="btn btn-success btn-sm" v-if="!isPreview" v-on:click="openBillSettingsModal()">
                Bill settings
                <i class="fa fa-cog" data-toggle="tooltip" title="Map Product sell price to bill column price or total"></i>
            </button>
            <button style="margin-top:25px; float:right;  margin-right:10px;" type="button" class="btn btn-success btn-sm" v-if="isPreview" v-on:click="print(1)">Print (A4 Half sheet)</button>
            <button style="margin-top:25px; float:right;  margin-right:10px;" type="button" class="btn btn-success btn-sm" v-if="isPreview" v-on:click="print(2)">Print (A4 Full sheet)</button>
        </div>
    </div>
    <div style="margin-top:20px;">
        <div class="alert alert-success alert-dismissible fade show" role="alert" v-cloak v-bind:class="{hide:!alertMessage}" style="margin-top: 20px;">
            {{alertMessage}}
            <button type="button" class="close" v-on:click="closeAlertMessage('alertMessage')" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

        <div v-cloak class="alert alert-danger alert-dismissible fade show" role="alert" v-bind:class="{hide:!alertFailureMessage}" style="margin-top: 20px;">
            {{alertFailureMessage}}
            <button type="button" class="close" v-on:click="closeAlertMessage('alertFailureMessage')" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

        <div class="card" v-show="!isPreview" style="font-size: 0.85em; color: #6c757d !important;">
            <div class="card-body">
                <table class="table text-secondary" style="font-size: 0.85em; color: #6c757d !important;">
                    <thead class="thead-light table-head">
                        <tr class="table-row">
                            <th style="width: 45px" scope="col">#</th>
                            <th class="text-center" style="width: 200px;" scope="col">Name</th>
                            <th class="text-center" scope="col">Price</th>
                            <th class="text-center" scope="col">Price (Tax)</th>
                            <th class="text-center" scope="col">Quantity</th>
                            <th class="text-center" scope="col">Disc %</th>
                            <th class="text-center" scope="col">Total</th>
                        </tr>
                    </thead>
                    <tbody class="table-body">
                        <tr class="table-row" v-for="(item,index) in items">
                            <td style="width: 45px">{{index+1}}</td>
                            <td style="width: 200px;">
                                <div class="product-select-2" style="position:relative !important">
                                    <input type="text" :data-index="index" v-model="item.Name" class="form-control form-control-sm" placeholder="Search">
                                    <ul class="list-group custom-select-border" style="position:absolute; z-index:1000; width:100%;"></ul>
                                </div>
                                @*<select v-bind:id="'product-sel-'+index" :data-id="index" class="product-select-2 js-example-basic-single js-states form-control"></select>*@
                            </td>
                            <td> <input type="text" v-model="item.Price" v-on:keyup="calculatePerItemAmount(index)" class="form-control form-control-sm"></td>
                            <td> <input type="text" readonly v-model="item.PriceWithTax" class="form-control form-control-sm"></td>
                            <td> <input type="text" v-model="item.Quantity" v-on:keyup="calculatePerItemAmount(index)" class="form-control form-control-sm"></td>
                            <td> <input type="text" v-model="item.Discount" v-on:keyup="calculatePerItemAmount(index)" class="form-control form-control-sm"></td>
                            <td> <input type="text" readonly v-model="item.TotalAmount" class="form-control form-control-sm"></td>
                        </tr>
                    </tbody>
                </table>
                <hr />
                <div class="row">
                    <div class="col-lg-4 col-sm-4">
                        <table style="font-size: 0.85em; color: #6c757d !important;" class="table table-bordered table-sm">
                            <tr>
                                <th class="text-center" colspan="2">Customer Information</th>
                            </tr>
                            <tr>
                                <th>Name:</th>
                                <td>
                                    <input type="text" v-model="CustomerName" class="form-control form-control-sm">
                                </td>
                            </tr>
                            <tr>
                                <th>Phone Number:</th>
                                <td><input type="text" v-model="CustomerMobileNumber" class="form-control form-control-sm"></td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-lg-8 col-sm-8">
                        <div class="row">
                            <div class="col-lg-3 col-sm-3 ml-auto pl-0">
                                <table style="font-size: 0.85em; color: #6c757d !important;" class="table table-bordered table-sm">
                                    <tr>
                                        <th>
                                            Total
                                        </th>
                                        <th>{{displayFormat(total)}}</th>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-12" style="font-size: 0.85em; color: #6c757d !important;" v-if="TotalInWords">
                                <span>
                                    Amount (in words) : &nbsp;
                                    <strong>
                                        <i class="fa fa-inr"></i>  {{TotalInWords}} Only
                                    </strong>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    @*Modal for success on save bill*@
    <div class="modal" id="success-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bill saved successfully.</h5>
                </div>
                <div class="modal-body">
                    <p>You can Print, Edit and Delete the bill from the Sales grid.</p>
                    <p>Please <a href="/Sale/List">click here</a> to go the sales grid</p>
                </div>
            </div>
        </div>
    </div>


    @*Bill settings*@
    <div class="modal d-print-none" id="bill-settings-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bill Settings.</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info" role="alert">
                        On selecting the product at the time billing, If GST is already included in the Product price
                        then map the Product columns to the Billing total column or else if GST is to be included on the
                        Product price then map the Product available columns to the Billing Price column
                    </div>
                    <table style="font-size: 0.85em; color: #6c757d !important;" class="table table-bordered table-sm">
                        <tr>
                            <th class="text-center" colspan="3">Product column and Bill column mappings</th>
                        </tr>
                        <tr>
                            <th class="text-center">Product Columns</th>
                            <th class="text-center" style="vertical-align:middle !important" rowspan="3">Map To</th>
                            <th class="text-center">Bill Columns</th>
                        </tr>
                        <tr>
                            <td>
                                <select class="form-control form-control-sm" v-model="billSettings.ProductColumn">
                                    <option value="Price">List Price</option>
                                    <option value="DiscountPrice">Buy Price</option>
                                    <option value="SellPrice">Sell Price</option>
                                </select>
                            </td>
                            <td>
                                <select class="form-control form-control-sm" v-model="billSettings.BillColumn">
                                    <option value="Price">Price </option>
                                    <option value="TotalAmount">Total</option>
                                </select>
                            </td>
                        </tr>
                    </table>
                    <hr />
                    <table style="font-size: 0.85em; color: #6c757d !important;" class="table table-bordered table-sm">
                        <tr>
                            <th colspan="2" class="text-center">
                                Print estimate column settings (show/hide)
                                <i class="fa fa-info-circle fa-lg" data-toggle="tooltip" title="The column to be shown or hidden in the Bill"></i>
                            </th>
                        </tr>
                        <tr>
                            <th class="text-center" style="width:350px; vertical-align:middle">Price column required</th>
                            <td class="text-center">
                                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                    <label class="btn btn-outline-success btn-sm" v-bind:class="{customActive: billSettings.Price}" style="width:150px !important">
                                        <input type="radio" v-on:click="printBillColumnSettings('Price', true)"> Show
                                    </label>
                                    <label class="btn btn-outline-success btn-sm" v-bind:class="{customActive: !billSettings.Price}" style="width:150px !important">
                                        <input type="radio" v-on:click="printBillColumnSettings('Price' ,false)"> Hide
                                    </label>
                                    <span style="padding-left:10px;">
                                    </span>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <th class="text-center" style="width:350px; vertical-align:middle">Price (tax) column required</th>
                            <td class="text-center">
                                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                    <label class="btn btn-outline-success btn-sm" v-bind:class="{customActive: billSettings.PriceWithTax}" style="width:150px !important">
                                        <input type="radio" v-on:click="printBillColumnSettings('PriceWithTax' , true)"> Show
                                    </label>
                                    <label class="btn btn-outline-success btn-sm active" v-bind:class="{customActive: !billSettings.PriceWithTax}" style="width:150px !important">
                                        <input type="radio" v-on:click="printBillColumnSettings('PriceWithTax' ,false)"> Hide
                                    </label>
                                    <span style="padding-left:10px;">
                                    </span>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <th class="text-center" style="width:350px; vertical-align:middle">Discount column required</th>
                            <td class="text-center">
                                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                                    <label class="btn btn-outline-success btn-sm" v-bind:class="{customActive: billSettings.Discount}" style="width:150px !important">
                                        <input type="radio" v-on:click="printBillColumnSettings('Discount' ,true)"> Show
                                    </label>
                                    <label class="btn btn-outline-success btn-sm active" v-bind:class="{customActive: !billSettings.Discount}" style="width:150px !important">
                                        <input type="radio" v-on:click="printBillColumnSettings('Discount' ,false)"> Hide
                                    </label>
                                    <span style="padding-left:10px;">
                                    </span>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success btn-sm" v-on:click="updateBillSettings()">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div id="print-bill" class="card" v-show="isPreview" style="color: #6c757d !important; font-size: 0.90em; border:none">
        <div class="card-header text-center" style="border:none">
            <strong class="text-center">Estimate</strong>
            <span class="pull-right">(ORIGINAL FOR RECIPIENT)</span>
        </div>
        <div class="card-body pt-0">
            <div class="row border-bottom border-left border-right border-top">
                <div class="col-md-12 pr-0 pl-0">
                    <div class="table-responsive-sm">
                        <table style="color: #6c757d !important;" class="table table-custom table-borderless table-sm mb-0">
                            <thead>
                                <tr>
                                    <th class="border-left border-right border-top border-bottom text-center" scope="col" style="width: 45px;">#</th>
                                    <th class="border-right border-top border-bottom text-center" scope="col" style="width: 400px;">Description of Goods</th>
                                    <th class="border-right border-top border-bottom text-center" scope="col">Quantity</th>
                                    <th class="border-right border-top border-bottom text-center" scope="col">Rate</th>
                                    <th class="border-right border-top border-bottom text-center" scope="col">per</th>
                                    <th class="border-right border-top border-bottom text-center" scope="col">Disc %</th>
                                    <th class="border-right border-bottom border-top text-center" scope="col">Amount</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="(item,index) in items" v-if="item.Name">
                                    <td class="text-center border-left border-right">{{index+1}}</td>
                                    <td class="left strong border-right" style="width: 400px;">{{item.Name}}</td>
                                    <td class="border-right">{{item.Quantity}}</td>
                                    <td class="border-right">{{displayFormat(item.Price)}}</td>
                                    <td class="border-right">{{item.MeasuringUnit}}</td>
                                    <td class="border-right">{{displayFormat(item.Discount)}}</td>
                                    <td class="text-right border-right">{{displayFormat(item.TotalAmount)}}</td>
                                </tr>
                                <tr>
                                    <td class="center border-left border-right border-top border-bottom"></td>
                                    <td class="text-center border-right border-top border-bottom">
                                        <strong>Total</strong>
                                    </td>
                                    <td class="text-right border-right border-top border-bottom">
                                        <strong>
                                            {{TotalQuantity}}
                                        </strong>
                                    </td>
                                    <td class="border-right border-top border-bottom"></td>
                                    <td class="border-right border-top border-bottom"></td>
                                    <td class="border-right border-top border-bottom"></td>
                                    <td class="text-right border-right border-top border-bottom">
                                        <strong>
                                            <i class="fa fa-inr"></i>
                                            {{displayFormat(total)}}
                                        </strong>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-12 pt-2 pb-2 border-bottom">
                    <span>
                        Amount (in words) &nbsp;
                        <strong>
                            <i class="fa fa-inr"></i>
                            {{TotalInWords}} Only
                        </strong>
                    </span>
                </div>
            </div>
        </div>
    </div>
</div>
    <script src="~/Scripts/NumberToWords.js"></script>
    <script>
    $(document).ready(function() {
        var items = [];
        for (var i = 0; i < 25; i++) {
            items.push({
                Name: "",
                MeasuringUnit: "",
                Quantity: "",
                TotalAmount: "",
                Price: "",
                PriceWithTax:"",
                Discount: "",
                ItemId: 0,
                EstimateId: 0,
                Id: 0
            });
        }

        function getDate() {
            var date = new Date();
            var day = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
            var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
            return `${day}-${month}-${date.getFullYear()}`;
        }

        function generateInvoiceNumber() {
            function pad2(n) {
                return (n < 10 ? '0' : '') + n;
            }

            var currentDate = new Date();
            return currentDate.getFullYear() +
                pad2(currentDate.getMonth() + 1) +
                pad2(currentDate.getDate()) +
                pad2(currentDate.getHours()) +
                pad2(currentDate.getMinutes()) +
                pad2(currentDate.getSeconds());
        }

        var obj = {
            alertFailureMessage: "",
            alertMessage: "",
            items: items,
            isPreview: false,
            isSelect2Rendered: true,
            CustomerName: "",
            CustomerMobileNumber:"",
            Id: 0,
            Invoice: "",
            TotalInWords: "",
            Date: getDate(),
            TotalQuantity:"",
            isPrintOnly: false, // This property is set to true only if print is given from sales grid
            printPageSettings: "",
            billSettings: {
                ProductColumn: "SellPrice",
                BillColumn: "Price",
                Price: false,
                PriceWithTax: true,
                Discount: false,
            },
        }
        new Vue({
            el: '#app',
            data: obj,
            methods: {
                printBillColumnSettings: function (name, value) {
                    this.billSettings[name] = value;
                    localStorage.setItem("estimateSettings", JSON.stringify(this.billSettings));
                },
                calculatePerItemAmount: function(index) {
                    var ref = this.items[index];
                    var taxInPercentage = ref.CGST;
                    ref.CGST = taxInPercentage;
                    ref.SGST = taxInPercentage;

                    var totalAmountWithNoDiscount = Math.round((ref.Price * ref.Quantity) * 100) / 100;
                    var discountPrice = ref.Discount
                        ? totalAmountWithNoDiscount - (ref.Price * ref.Quantity * ref.Discount) / 100
                        : totalAmountWithNoDiscount;
                    ref.SubTotal = Math.round(discountPrice * 100) / 100;
                    ref.TotalDiscount = Math.round((totalAmountWithNoDiscount - discountPrice) * 100) / 100;
                    var tax = Math.round(((ref.SubTotal * taxInPercentage) / 100) * 100) / 100;
                    ref.TotalCGSTAmount = tax;
                    ref.TotalSGSTAmount = tax;
                    ref.TotalAmount = Math.round((discountPrice + 2 * tax) * 100) / 100;
                    ref.PriceWithTax = parseFloat(ref.Price) + Math.round(((ref.Price * taxInPercentage * 2) / 100) * 100) / 100;
                },
                openBillSettingsModal: function () {
                    $("#bill-settings-modal").modal({ backdrop: 'static', keyboard: false, show: true });
                },
                closeAlertMessage: function(property) {
                    this[property] = "";
                },
                displayFormat: function (data) {
                    return Number(data).toLocaleString(undefined, { minimumFractionDigits: 2 })
                },
                showOrHidePreview: function(value) {
                    this.isPreview = value;
                    this.TotalInWords = convertNumberToWords(this.total);
                },
                print: function(id) {
                    this.isPreview = true;
                    if (id === 2)
                        this.printPageSettings.innerHTML = `@@page{
                                                            size: 210mm 296mm;
                                                            width: 210mm;
                                                            height: 296mm;
                                                            margin:0;
                                                           }`;
                    else
                        this.printPageSettings.innerHTML = `@@page{
                                                            size: 210mm 146mm;
                                                            width: 210mm;
                                                            height: 146mm;
                                                            margin:0;
                                                           }`;
                    window.print();
                },
                afterPrint: function () {
                    if (!this.isPrintOnly)
                        this.save();
                },
                getRunningInvoice: function () {
                    var self = this;
                    //$.get("/Sale/GetInvoice", function (data) {
                    //    self.Invoice = data;
                    //});
                },
                roundOffTwoPlace: function (number) {
                    return 0 || Math.round(number * 100) / 100
                },
                save: function() {
                    var self = this;
                    var validData = [];
                    self.items.forEach((data) => {
                        if (data.Name && data.Quantity) {
                            validData.push(data);
                        }
                    });

                    var apiEndPoint = "/Estimate/Save";
                    if (validData.length) {
                        var finalData = {
                            Estimate: {
                                TotalAmount: self.total,
                                Invoice: self.Invoice,
                                TempDate: self.Date,
                                Id: self.Id,
                                Name: self.CustomerName,
                            },
                            EstimateItems: validData,
                        }

                        $.ajax({
                            type: 'POST',
                            url: apiEndPoint,
                            data: JSON.stringify(finalData),
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            success: function() {
                                $("#success-modal").modal({ backdrop: 'static', keyboard: false, show: true });
                            },
                            error: function (res) {
                                self.alertFailureMessage = "Internal server error. Please try to save again";
                            }
                        });
                    }
                },
                initSelect2: function () {
                    var self = this;

                    //$(".product-select-2").select2({
                    //    ajax: {
                    //        url: "/item/GetDataBySearch",
                    //        dataType: 'json',
                    //        delay: 250,
                    //        data: function (params) {
                    //            return {
                    //                q: params.term,
                    //                page: params.page
                    //            };
                    //        },
                    //        processResults: function (data, params) {
                    //            var products = [];
                    //            data.forEach((product) => {
                    //                products.push({
                    //                    id: product.Id,
                    //                    text: product.Name,
                    //                    Price: product.Price,
                    //                    CGST: product.CGST,
                    //                    SGST: product.SGST,
                    //                    DiscountPrice: product.DiscountPrice,
                    //                    Discount: product.Discount,
                    //                    HSN: product.HSN,
                    //                    MeasuringUnit: product.MeasuringUnit
                    //                });
                    //            });

                    //            return {
                    //                results: products
                    //            };
                    //        },
                    //        cache: true
                    //    },
                    //    placeholder: 'Search for a Product',
                    //    minimumInputLength: 1
                    //});

                    //$('.product-select-2').on('select2:select',
                    //    function(e) {
                    //        var index = parseInt($(this).attr('data-id'));
                    //        var data = e.params.data;
                    //        self.items[index].ItemId = data.id;
                    //        self.items[index].Name = data.text;
                    //        self.items[index].Price = data.Price;
                    //        self.items[index].CGST = data.CGST;
                    //        self.items[index].Quantity = 1;
                    //        self.items[index].Discount = data.Discount || 0;
                    //        self.items[index].Id = 0;
                    //        self.items[index].MeasuringUnit = data.MeasuringUnit;
                    //        self.calculatePerItemAmount(index);
                    //    }); 

                    var obj = {
                        ele: ".product-select-2", endPoint: "/item/GetDataBySearch", prop: "Name", callback: function (ele, value) {
                            var billColumn = self.billSettings.BillColumn;
                            var productColumn = self.billSettings.ProductColumn;
                            var index = parseInt(ele.attr('data-index'));
                            var data = JSON.parse(value);


                            self.items[index].ItemId = data.id;
                            self.items[index].Name = data.Name;
                            self.items[index][billColumn] = data[productColumn];
                            self.items[index].CGST = data.CGST;
                            self.items[index].Quantity = 1;
                            self.items[index].Discount = data.Discount || 0;
                            self.items[index].Id = 0;
                            self.items[index].MeasuringUnit = data.MeasuringUnit;
                            self.calculatePerItemAmount(index);
                        }
                    };
                    selectSearchEvent(obj);
                }
            },
            computed: {
                total: function() {
                    var totalAmount = 0;
                    var totalItems = 0;
                    this.items.forEach(function(item) {
                        totalAmount += parseFloat(item.TotalAmount || 0);
                        totalItems += parseInt(item.Quantity || 0);
                    });
                    this.TotalQuantity = totalItems;
                    this.TotalInWords = convertNumberToWords(totalAmount);
                    return this.roundOffTwoPlace(totalAmount);
                }
            },
            mounted() {
                var self = this;
                self.getRunningInvoice();
                $(".nav-link-estimate").addClass("active");
                var url = window.location.href;
                var isPrint = url.includes("pid");
                var id = parseInt(url.substring(url.lastIndexOf('/') + 1));

                self.isPreview = isPrint;
                self.isPrintOnly = isPrint;
                // Edit functionality
                if (Number.isInteger(id)) {
                    $.get(`/Estimate/Bill/${id}`,
                        function (data) {
                            self.CustomerName = data.Name;
                            self.total = data.SaleDetail.TotalAmount;
                            self.Invoice = data.SaleDetail.Invoice;
                            self.TempDate = data.SaleDetail.FormatDate;
                            self.Date = data.SaleDetail.FormatDate;
                            self.Id = data.SaleDetail.Id;

                            if (self.items.length) {
                                data.SaleItems.forEach(function(data, index) {
                                    self.items[index].Name = data.Name;
                                    self.items[index].Quantity = data.Quantity;
                                    self.items[index].TotalAmount = data.TotalAmount;
                                    self.items[index].SubTotal = data.SubTotal;
                                    self.items[index].Price = data.Price;
                                    self.items[index].ItemId = data.ItemId;
                                    self.items[index].Id = data.Id;
                                    self.items[index].EstimateId = data.EstimateId;
                                    self.items[index].Discount = data.Discount;
                                    self.items[index].MeasuringUnit = data.MeasuringUnit;
                                });
                            };
                        });
                }

                self.printPageSettings = document.createElement('style');
                document.head.appendChild(self.printPageSettings);
                self.printPageSettings.innerHTML = "";

                self.initSelect2();
                window.onafterprint = self.afterPrint;
                var settingValue = localStorage.getItem("estimateSettings");
                if (settingValue) {
                    var data = JSON.parse(settingValue);
                    self.billSettings = data;
                }
            }
        });
    });
    </script>


