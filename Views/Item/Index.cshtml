@model MahadevHWBillingApp.Models.Profile
@{
    ViewBag.Title = "Items";
}

<style>
    .pointer {
        cursor: pointer;
    }

    .grid-edit {
        text-decoration: underline;
        color: #158cba;
        cursor: pointer;
    }

    .hide {
        display: none;
    }

    [v-cloak] {
        display: none;
    }

    .table-head, .table-body .table-row {
        display: table;
        width: 100%;
        table-layout: fixed;
    }

    @@media only screen and (min-width: 768px) {
        .table-body {
            display: block;
            max-height: 250PX;
            overflow-y: scroll;
        }
    }

    @@media only screen and (min-width: 992px) {
        .table-body {
            display: block;
            max-height: 200px;
            overflow-y: scroll;
        }
    }

    @@media only screen and (min-width: 1500px) {
        .table-body {
            display: block;
            max-height: 500px;
            overflow-y: scroll;
        }
    }
</style>

<div id="app">
    <div class="row" style="background-color: #f6f7f8 !important;">
        <div class="col-md-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb" style="padding-bottom: 0px; margin-bottom: 0px; background-color: #f6f7f8 !important;">
                    <li class="breadcrumb-item"><i class="fa fa-home">&nbsp;</i><a href="#">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Products</li>
                </ol>
            </nav>
            <h4 style="padding-left: 15px;">Products</h4>
        </div>
        <div class="col-md-4">
            <button style="margin-top: 25px; float: right;" type="button" class="btn btn-success btn-sm" v-on:click="downloadReport()">Download</button>
            <button style="margin-top:25px; float:right;  margin-right:10px;" type="button" class="btn btn-success btn-sm" v-on:click="openModalForAddProduct()">Add New Product</button>
        </div>
    </div>
    <div style="margin-top:20px;">
        <div class="alert alert-success alert-dismissible fade show" role="alert" v-cloak v-bind:class="{hide:!alertMessage}" style="margin-top: 20px;">
            {{alertMessage}}
            <button type="button" class="close" v-on:click="closeAlertMessage('alertMessage')" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

        <div v-cloak class="alert alert-danger alert-dismissible fade show" role="alert" v-bind:class="{hide:!alertFailureMessage}" style="margin-top: 20px;">
            {{alertFailureMessage}}
            <button type="button" class="close" v-on:click="closeAlertMessage('alertFailureMessage')" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

        <div class="card">
            <div class="card-body" style="font-size:14px;">
                <table id="product-table"
                       class="table text-secondary" style="font-size:14px;">
                    <thead class="thead-light">
                        <tr>
                            <th style="min-width:150px">Name</th>
                            <th>HSN/SAC</th>
                            <th>PER</th>
                            <th>Quantity Available</th>
                            <th>Quantity Sold</th>
                            <th>SGST (%)</th>
                            <th>CGST (%)</th>
                            <th>Discount %</th>
                            <th>List Price</th>
                            <th>Discount Price</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                </table>

            </div>
        </div>

        <!-- The Modal -->
        <div class="modal" id="myModal">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Edit Product</h4>
                        <button type="button" class="close" v-on:click="closeModal('#myModal')">&times;</button>
                    </div>

                    <!-- Modal body -->
                    <div class="modal-body scroll" style="padding-left:50px;">
                        <form>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">Name</label>
                                <div class="col-sm-6">
                                    <input v-model="item.Name" cv="required" type="text" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">HSN/SAC</label>
                                <div class="col-sm-6">
                                    <input v-model="item.HSN" type="text" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">PER</label>
                                <div class="col-sm-6">
                                    <select class="form-control" v-model="item.MeasuringUnit">
                                        <option value="Unit">Unit</option>
                                        <option value="NOS">NOS</option>
                                        <option value="Bag">Bag</option>
                                        <option value="Box">Box</option>
                                        <option value="KGS">KGS</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group row" v-if="isStockCountEnabled">
                                <label class="col-md-3 col-form-label">Quantity Available</label>
                                <div class="col-sm-6">
                                    <input type="number" readonly v-model="item.Quantity" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row" v-if="isStockCountEnabled">
                                <label class="col-md-3 col-form-label">Add Quantity</label>
                                <div class="col-sm-6">
                                    <input v-model="item.QuantityAdded" cv="required" type="number" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">CGST</label>
                                <div class="col-sm-6">
                                    <input v-model="item.CGST" cv="required" type="number" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">SGST</label>
                                <div class="col-sm-6">
                                    <input v-model="item.SGST" cv="required" type="number" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">Discount %</label>
                                <div class="col-sm-6">
                                    <input v-model="item.Discount" v-on:keyup="calculateEditItemDiscount()" type="number" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">List Price</label>
                                <div class="col-sm-6">
                                    <input v-model="item.Price" cv="required" v-on:keyup="calculateEditItemDiscount()" type="number" class="form-control">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-md-3 col-form-label">Discount Price</label>
                                <div class="col-sm-6">
                                    <input readonly v-model="item.DiscountPrice" type="number" class="form-control">
                                </div>
                            </div>
                        </form>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-success btn-sm" v-on:click="saveEditItem()">Save</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal" id="add-product">
            <div class="modal-dialog modal-dialog-centered modal-xl">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <div class="modal-header">
                        <h4 class="modal-title">Add Products</h4>
                        <button type="button" class="close" v-on:click="closeModal('#add-product')">&times;</button>
                    </div>

                    <!-- Modal body -->
                    <div class="modal-body">

                        <table class="table text-secondary" id="add-product-table" style="font-size: 14px; margin-bottom:5px;">
                            <thead class="thead-light table-head">
                                <tr class="table-row">
                                    <th style="width: 45px" scope="col">#</th>
                                    <th style="width:150px !important" scope="col">Name</th>
                                    <th scope="col">HSN/SAC</th>
                                    <th scope="col">PER</th>
                                    <th scope="col" v-if="isStockCountEnabled">Quantity Available</th>
                                    <th scope="col">SGST (%)</th>
                                    <th scope="col">CGST (%)</th>
                                    <th scope="col">Discount %</th>
                                    <th scope="col">List Price</th>
                                    <th scope="col">Discount Price</th>
                                </tr>
                            </thead>
                            <tbody class="table-body">
                                <tr class="table-row" v-for="(item,index) in newItems">
                                    <td style="width: 45px">{{index+1}}</td>
                                    <td style="width:150px !important"> <input type="text" cv="required" v-model="item.Name" class="form-control form-control-sm"></td>
                                    <td> <input type="text" v-model="item.HSN" class="form-control form-control-sm"></td>
                                    <td>
                                        <select class="form-control form-control-sm" v-model="item.MeasuringUnit">
                                            <option value="NOS">NOS</option>
                                            <option value="Unit">Unit</option>
                                            <option value="Bag">Bag</option>
                                            <option value="Box">Box</option>
                                            <option value="KGS">KGS</option>
                                        </select>
                                    </td>
                                    <td v-if="isStockCountEnabled"> <input type="number" cv="required" v-model="item.Quantity" class="form-control form-control-sm"></td>
                                    <td> <input type="number" v-model="item.SGST" cv="required" class="form-control form-control-sm"></td>
                                    <td> <input type="number" v-model="item.CGST" cv="required" v-on:keyup="copyTax(index)" class="form-control form-control-sm"></td>
                                    <td> <input type="number" step=".01" v-model="item.Discount" v-on:keyup="calculatePerItemDiscount(index)" class="form-control form-control-sm"></td>
                                    <td> <input type="number" v-model="item.Price" cv="required" v-on:keyup="calculatePerItemDiscount(index)" class="form-control form-control-sm"></td>
                                    <td> <input type="number" readonly v-model="item.DiscountPrice" class="form-control form-control-sm"></td>
                                </tr>
                            </tbody>
                        </table>
                        <button type="button" class="btn btn-success btn-sm" style="margin-left:45px;" v-on:click="addEmptyProduct()">Add New</button>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-success btn-sm" v-on:click="saveNewProduct()">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    $(document).ready(function() {

        function addEmptyNewItems() {
            var result = [];
            for (var i = 0; i < 1; i++) {
                result.push({
                    Name: "",
                    Price: "",
                    CGST: "",
                    SGST: "",
                    Discount: "",
                    Quantity: "",
                    MeasuringUnit: "NOS",
                    DiscountPrice: "",
                    HSN: ""
                });
            }
            return result;
        }

        var obj = {
            items: [],
            item: {},
            alertFailureMessage: "",
            alertMessage: "",
            newItems: addEmptyNewItems(),
            tableRef: null,
            isStockCountEnabled: false
        }

        new Vue({
            el: '#app',
            data: obj,
            methods: {
                addEmptyProduct: function () {
                    this.newItems.push(addEmptyNewItems()[0]);
                    var height = 50 * this.newItems.length;
                    setTimeout(function () {
                        $(".table-body").scrollTop(height)
                        validation[0].register();
                    },300)
                },
                copyTax: function (index) {
                    this.newItems[index].CGST = this.newItems[index].SGST;
                },
                calculatePerItemDiscount: function(index) {
                    var currentItem = this.newItems[index];
                    this.calculateDiscount(currentItem);
                },
                calculateDiscount: function (currentItem) {
                    var self = this;
                    var tax = parseInt(currentItem.CGST) + parseInt(currentItem.SGST); 
                    var cp = parseFloat(currentItem.Price);
                    var price = cp + ((tax / 100) * cp);
                    if (currentItem.Discount) {
                        tempPrice =
                            price - ((currentItem.Discount / 100) * price);
                        currentItem.DiscountPrice = self.roundOffTwoPlace(tempPrice);
                    } else {
                        currentItem.DiscountPrice = self.roundOffTwoPlace(price);
                    }
                },
                calculateEditItemDiscount: function () {
                    this.calculateDiscount(this.item);
                },
                deleteItem: function(id) {
                    var self = this;
                    self.isSpinner = true
                    $.get("/item/RemoveItem?id=" + id,
                        function() {
                            self.alertMessage = "Item deleted succesfully";
                            self.tableRef.ajax.reload(self.bindTableClickEvents);
                        }).fail(function() {
                        self.alertFailureMessage = "Internal server error";
                    });
                },
                openModalForAddProduct: function() {
                    $("#add-product").modal("show");
                },
                closeModal: function (id) {
                    var self = this;
                    self.newItems = addEmptyNewItems();
                    validation[0].removeErrorMessage();
                    $(id).modal("hide");
                },
                roundOffTwoPlace: function (number) {
                    return 0 || Math.round(number * 100) / 100
                },
                saveNewProduct: function () {
                    validation[0].register();
                    var isValid = validation[0].isTableDataValid("add-product-table");
                    if (isValid === 0) {
                        var self = this;
                        $.ajax({
                            type: 'POST',
                            url: '@Url.Action("AddItems", "Item")',
                            data: JSON.stringify(self.newItems),
                            dataType: 'json',
                            contentType: 'application/json; charset=utf-8',
                            success: function () {
                                self.closeModal("#add-product");
                                self.alertMessage = "Product Added succesfully.";
                                self.newItems = addEmptyNewItems();
                                self.tableRef.ajax.reload(self.bindTableClickEvents);
                            }
                        });
                    }
                },
                saveEditItem: function() {
                    var self = this;
                        var isValid = validation[0].isFormDataValid();
                        if (isValid == 0) {
                            if (Number.isInteger(parseInt(self.item.QuantityAdded)))
                                self.item.Quantity += parseInt(self.item.QuantityAdded);
                            $.post("/item/EditItem",
                                self.item,
                                function (data) {
                                    self.closeModal("#myModal");
                                    self.alertMessage = "Item Edited succesfully";
                                    self.tableRef.ajax.reload(self.bindTableClickEvents);
                                }).fail(function () {
                                    self.alertFailureMessage = "Internal server error";
                                });
                        }
                },
                getProductById: function(id) {
                    var self = this;
                    $.get(`/item/GetDataById/${id}`,
                        function(data, status) {
                            self.item = data;
                            self.item.QuantityAdded = "";
                            $("#myModal").modal("show");
                        }).fail(function() {
                        self.alertFailureMessage = "Internal server error";
                    });
                },
                hideStockCountColumns: function () {
                    var self = this;
                    if (self.isStockCountEnabled)
                        return;
                    self.tableRef.column(3).visible(false);
                    self.tableRef.column(4).visible(false);
                },
                bindTableClickEvents: function() {
                    var self = this;
                    $(".edit-item").click(function(e) {
                        var id = $(this).attr("data-id");
                        self.getProductById(id);
                    });

                    $(".delete-item").click(function(e) {
                        var id = $(this).attr("data-id");
                        self.deleteItem(id);
                    });
                },
                closeAlertMessage: function(property) {
                    // set alert message to empty
                    this[property] = "";
                },
                downloadReport: function () {
                    var self = this;
                    var endPoint = `/Report/Product`;
                    $.get(endPoint,
                        function (data, status) {
                            window.location = endPoint;
                        }).fail(function () {
                            self.alertFailureMessage = "Internal server error";
                        });
                },
                getTableData: function() {
                    var self = this;
                    self.tableRef = $("#product-table").DataTable({
                        ajax: {
                            url: "/item/GetData",
                            type: "GET",
                            dataSrc: function(json) {
                                return json;
                            },
                            error: function(xhr, error) {
                                if (xhr.status === 401) alert("Unauthorised user");
                            }
                        },
                        fixedHeader: {
                            header: true,
                            footer: true
                        },
                        columns: [
                            { data: "Name" },
                            {
                                data: "HSN",
                                render: function (data, type, row, meta) {
                                    return `<span class="edit-item grid-edit" data-id=${row.Id}>${data}</span>`;

                                }
                            },
                            { data: "MeasuringUnit" },
                            { data: "Quantity" },
                            { data: "SoldQuantity" },
                            { data: "SGST" },
                            { data: "CGST" },
                            { data: "Discount" },
                            { data: "Price" },
                            { data: "DiscountPrice" },
                            {
                                render: function(data, type, row, meta) {
                                    return `<i class="fa fa-trash pointer delete-item" data-id=${row.Id}></i>`;
                                }
                            }
                        ],
                        lengthMenu: [[5, 20, 25, 30, 100], [5, 20, 25, 30, 100]],
                        initComplete: function(settings, json) {
                            self.bindTableClickEvents();
                            self.hideStockCountColumns();
                        }
                    });
                }
            },
            mounted() {
                var self = this;
                $(".nav-link-item").addClass("active");
                self.isStockCountEnabled = '@Model.EnableStockCount' === 'True';
                validation[0].register();
                $('#product-table').on('draw.dt',
                    function () {
                        self.bindTableClickEvents();
                    });
                this.getTableData();
            }
        });
    });
</script>
